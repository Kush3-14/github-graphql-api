import Head from "next/head";
import {
  ApolloClient,
  InMemoryCache,
  createHttpLink,
  gql,
} from "@apollo/client";
import { setContext } from "@apollo/client/link/context";
import Navbar from "./Components/Navbar";
import Layout from "./Components/Layout";
import CreateRepositoryForm from "./Components/CreateRepositoryForm";
import { useSession, signIn, signOut } from "next-auth/react";

export default function Home({ allRepos }: any) {
  const { data: session } = useSession();

  return (
    <>
      <Head>
        <title>GraphQL API Implementation</title>
        <meta
          name="GitHub GraphQL API Implementation"
          content="Generated by create next app"
        />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link
          rel="stylesheet"
          href="https://cdn.jsdelivr.net/npm/bootstrap@4.0.0/dist/css/bootstrap.min.css"
          integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm"
          crossOrigin="anonymous"
        ></link>
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="sign" style={{ float: "right" }}>
        {session && session.user ? (
          <button
            type="button"
            className="btn btn-primary"
            style={{ backgroundColor: "blue" }}
            onClick={() => signOut()}
          >
            Sign out
          </button>
        ) : (
          <button
            type="button"
            className="btn btn-primary"
            style={{ backgroundColor: "blue" }}
            onClick={() => signIn()}
          >
            Sign in
          </button>
        )}
      </div>
      <main className="container">
        {session && session.user ? (
          <>
            <div className="welcome-msg">Hi, {session.user.name}!</div>
            <Navbar allRepos={allRepos}></Navbar>
            <div className="container">
              <div className="row">
                <div className="col">
                  <Layout allRepos={allRepos}></Layout>
                </div>
                <div className="col">
                  <CreateRepositoryForm />
                </div>
              </div>
            </div>
            <div id="matches-count"></div>
          </>
        ) : (
          <p>You need to sign in to access the contents</p>
        )}
      </main>
    </>
  );
}

export async function getStaticProps({ session }: any) {
  const httpLink = createHttpLink({
    uri: "https://api.github.com/graphql",
  });

  const authLink = setContext((_, { headers }) => {
    const accessToken = session?.accessToken || process.env.API_GITHUB_ACCESS_TOKEN;
    return {
      headers: {
        ...headers,
        authorization: `Bearer ${accessToken}`,
      },
    };
  });

  const client = new ApolloClient({
    link: authLink.concat(httpLink),
    cache: new InMemoryCache(),
  });

  const { data } = await client.query({
    query: gql`
      {
        viewer {
          login
        }
        user(login: "Kush3-14") {
          repositories(first: 100, orderBy: { field: NAME, direction: ASC }) {
            nodes {
              id
              name
              url
              stargazerCount
            }
          }
        }
      }
    `,
  });

  const { user } = data;
  const allRepos = user.repositories.nodes;

  return {
    props: {
      allRepos,
    },
  };
}
